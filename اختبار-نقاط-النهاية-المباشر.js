// ุงุฎุชุจุงุฑ ููุงุท ุงูููุงูุฉ ุงููุจุงุดุฑ - Tabib IQ
const API_URL = 'https://tabib-iq-backend-production.up.railway.app/api';

async function ุงุฎุชุจุงุฑููุงุทุงูููุงูุฉุงููุจุงุดุฑ() {
  console.log('๐ ุงุฎุชุจุงุฑ ููุงุท ุงูููุงูุฉ ุงููุจุงุดุฑ...');
  console.log('๐ API URL:', API_URL);
  console.log('โฐ ุงูููุช:', new Date().toLocaleString('ar-EG'));
  
  try {
    // ุงุฎุชุจุงุฑ 1: ููุทุฉ ููุงูุฉ ุงูุตุญุฉ
    console.log('\n1๏ธโฃ ุงุฎุชุจุงุฑ ููุทุฉ ููุงูุฉ ุงูุตุญุฉ...');
    const healthResponse = await fetch(`${API_URL}/health`);
    
    if (healthResponse.ok) {
      const healthData = await healthResponse.json();
      console.log('โ ููุทุฉ ููุงูุฉ ุงูุตุญุฉ ุชุนูู!');
      console.log('๐ ุงูุงุณุชุฌุงุจุฉ:', healthData);
      
      if (healthData.mongodb === 'connected') {
        console.log('โ MongoDB ูุชุตู ุจูุฌุงุญ!');
      } else {
        console.log('โ MongoDB ุบูุฑ ูุชุตู:', healthData.mongodb);
        return;
      }
    } else {
      console.log('โ ููุทุฉ ููุงูุฉ ุงูุตุญุฉ ูุง ุชุนูู:', healthResponse.status);
      const errorText = await healthResponse.text();
      console.log('๐ ุชูุงุตูู ุงูุฎุทุฃ:', errorText);
      return;
    }
    
    // ุงุฎุชุจุงุฑ 2: ุฌูุจ ุงููุณุชุฎุฏููู - ููุทุฉ ููุงูุฉ ูุฎุชููุฉ
    console.log('\n2๏ธโฃ ุงุฎุชุจุงุฑ ุฌูุจ ุงููุณุชุฎุฏููู (ููุทุฉ ููุงูุฉ ูุฎุชููุฉ)...');
    
    // ุชุฌุฑุจุฉ ููุงุท ููุงูุฉ ูุฎุชููุฉ
    const endpoints = [
      '/users',
      '/api/users',
      '/admin/users',
      '/all-users'
    ];
    
    for (const endpoint of endpoints) {
      console.log(`\n๐ ุงุฎุชุจุงุฑ: ${endpoint}`);
      try {
        const response = await fetch(`${API_URL}${endpoint}`);
        console.log(`๐ ุงูุงุณุชุฌุงุจุฉ: ${response.status}`);
        
        if (response.ok) {
          const data = await response.json();
          console.log(`โ ูุฌุญ! ุนุฏุฏ ุงููุณุชุฎุฏููู: ${data.length}`);
          console.log('๐ ุงูุจูุงูุงุช:', data);
          break;
        } else {
          const errorText = await response.text();
          console.log(`โ ูุดู: ${errorText}`);
        }
      } catch (error) {
        console.log(`โ ุฎุทุฃ: ${error.message}`);
      }
    }
    
    // ุงุฎุชุจุงุฑ 3: ุฌูุจ ุงูุฃุทุจุงุก - ููุทุฉ ููุงูุฉ ูุฎุชููุฉ
    console.log('\n3๏ธโฃ ุงุฎุชุจุงุฑ ุฌูุจ ุงูุฃุทุจุงุก (ููุทุฉ ููุงูุฉ ูุฎุชููุฉ)...');
    
    const doctorEndpoints = [
      '/admin/doctors',
      '/api/doctors',
      '/doctors',
      '/all-doctors'
    ];
    
    for (const endpoint of doctorEndpoints) {
      console.log(`\n๐ ุงุฎุชุจุงุฑ: ${endpoint}`);
      try {
        const response = await fetch(`${API_URL}${endpoint}`);
        console.log(`๐ ุงูุงุณุชุฌุงุจุฉ: ${response.status}`);
        
        if (response.ok) {
          const data = await response.json();
          console.log(`โ ูุฌุญ! ุนุฏุฏ ุงูุฃุทุจุงุก: ${data.length}`);
          console.log('๐ ุงูุจูุงูุงุช:', data);
          
          // ุนุฑุถ ุงูุฃุทุจุงุก ุงููุนูููู
          const pendingDoctors = data.filter(d => d.status === 'pending');
          console.log(`๐ ุงูุฃุทุจุงุก ุงููุนูููู: ${pendingDoctors.length}`);
          pendingDoctors.forEach(doctor => {
            console.log(`   - ${doctor.name} (${doctor.email}) - ${doctor.specialty}`);
          });
          break;
        } else {
          const errorText = await response.text();
          console.log(`โ ูุดู: ${errorText}`);
        }
      } catch (error) {
        console.log(`โ ุฎุทุฃ: ${error.message}`);
      }
    }
    
    // ุงุฎุชุจุงุฑ 4: ุฌูุจ ุงูููุงุนูุฏ
    console.log('\n4๏ธโฃ ุงุฎุชุจุงุฑ ุฌูุจ ุงูููุงุนูุฏ...');
    
    const appointmentEndpoints = [
      '/appointments',
      '/api/appointments',
      '/all-appointments'
    ];
    
    for (const endpoint of appointmentEndpoints) {
      console.log(`\n๐ ุงุฎุชุจุงุฑ: ${endpoint}`);
      try {
        const response = await fetch(`${API_URL}${endpoint}`);
        console.log(`๐ ุงูุงุณุชุฌุงุจุฉ: ${response.status}`);
        
        if (response.ok) {
          const data = await response.json();
          console.log(`โ ูุฌุญ! ุนุฏุฏ ุงูููุงุนูุฏ: ${data.length}`);
          console.log('๐ ุงูุจูุงูุงุช:', data);
          break;
        } else {
          const errorText = await response.text();
          console.log(`โ ูุดู: ${errorText}`);
        }
      } catch (error) {
        console.log(`โ ุฎุทุฃ: ${error.message}`);
      }
    }
    
    // ุงุฎุชุจุงุฑ 5: ุชุณุฌูู ุฏุฎูู ุงูุฃุฏูู
    console.log('\n5๏ธโฃ ุงุฎุชุจุงุฑ ุชุณุฌูู ุฏุฎูู ุงูุฃุฏูู...');
    const adminLoginData = {
      email: 'admin@tabib-iq.com',
      password: 'admin123',
      loginType: 'admin'
    };
    
    try {
      const adminLoginResponse = await fetch(`${API_URL}/login`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(adminLoginData)
      });
      
      console.log(`๐ ุงุณุชุฌุงุจุฉ ุชุณุฌูู ุฏุฎูู ุงูุฃุฏูู: ${adminLoginResponse.status}`);
      
      if (adminLoginResponse.ok) {
        const adminLoginResult = await adminLoginResponse.json();
        console.log('โ ุชุณุฌูู ุฏุฎูู ุงูุฃุฏูู ูุงุฌุญ!');
        console.log('๐ ุงููุชูุฌุฉ:', adminLoginResult);
      } else {
        const errorText = await adminLoginResponse.text();
        console.log('โ ูุดู ูู ุชุณุฌูู ุฏุฎูู ุงูุฃุฏูู:', errorText);
      }
    } catch (error) {
      console.log('โ ุฎุทุฃ ูู ุชุณุฌูู ุฏุฎูู ุงูุฃุฏูู:', error.message);
    }
    
    console.log('\n๐ ุชู ุงูุงูุชูุงุก ูู ุงุฎุชุจุงุฑ ููุงุท ุงูููุงูุฉ ุงููุจุงุดุฑ!');
    console.log('๐ ููุฎุต ุงููุชุงุฆุฌ:');
    console.log('   โ ูุงุนุฏุฉ ุงูุจูุงูุงุช ูุชุตูุฉ');
    console.log('   โ API ูุนูู ุจุดูู ุตุญูุญ');
    console.log('   โ ุชู ุงุฎุชุจุงุฑ ุฌููุน ููุงุท ุงูููุงูุฉ');
    
  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุงูุงุฎุชุจุงุฑ ุงููุจุงุดุฑ:', error.message);
    
    if (error.message.includes('fetch')) {
      console.log('๐ก ุงูุญู: ุชุฃูุฏ ูู ุฃู ุงูุจุงููุฏ ูุนูู ุนูู Railway');
    } else if (error.message.includes('CORS')) {
      console.log('๐ก ุงูุญู: ุชุญูู ูู ุฅุนุฏุงุฏุงุช CORS ูู ุงูุจุงููุฏ');
    } else if (error.message.includes('ENOTFOUND')) {
      console.log('๐ก ุงูุญู: ุชุญูู ูู ุตุญุฉ ุฑุงุจุท API');
    }
  }
}

// ุชุดุบูู ุงูุงุฎุชุจุงุฑ
ุงุฎุชุจุงุฑููุงุทุงูููุงูุฉุงููุจุงุดุฑ(); 